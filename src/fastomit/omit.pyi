from collections.abc import MutableMapping
from typing import Generic, Iterable, Optional, Protocol, SupportsIndex, TypeVar

from fastomit.types import ListStr, bool_opt

T = TypeVar("T")

class ListLike(Generic[T], Iterable, SupportsIndex): ...

class OmitterType(Protocol):
    def extend(self, target: ListStr) -> None: ...
    def omit(self, target: MutableMapping) -> dict: ...
    def omit_recurse(self, target: ListLike, do: bool_opt = True) -> ListLike: ...

def always_omit(targets: ListStr) -> None: ...
def globally_hidden() -> ListStr: ...
def reset_omissions() -> None: ...

class TrustOmitter(OmitterType):
    def __init__(self, omissions: Optional[ListStr] = None) -> None: ...
    @property
    def omitted(self) -> ListStr: ...

def always_trust(targets: ListStr) -> None: ...
def globally_trusted() -> ListStr: ...
def reset_trusted() -> None: ...

class TrustlessOmitter(OmitterType):
    def __init__(self, trusted: Optional[ListStr] = None) -> None: ...
    @property
    def trusted(self) -> ListStr: ...
